from NeMeAn_Seg2Data import getCellData, getPixelData
from NeMeAn_Data2Reg import loadCellSamples, loadPixelSamples, trainRegs


#### Setup image parameters
imgLinearRes = 0.125 #um/px

path_img = 'example_images'
sampleName_list = ['Example_control', 'Example_sham', 'Example_stim']

# Manually generated masks
fascicleMask_img_list = [sampleName+'_fasciclemask.png' for sampleName in sampleName_list] # For better windowed calculations
excludeMask_img_list = [sampleName+'_badfixmask.png' for sampleName in sampleName_list] # For excluding poor fixation regions
veinMask_img_list = [sampleName+'_veinmask.png' for sampleName in sampleName_list] # For excluding veins
electrodeMask_img_list = [sampleName+'_electrodemask.png' for sampleName in sampleName_list] # For calculating distance from electrode (or other features)

# Segmentation masks generated by AxonDeepSeg
segmented_img_list = [sampleName+'_segmask.png' for sampleName in sampleName_list]




#### Get cell-wise metrics for each sample set
# List of window dimensions for window-based measurements
windowShapes_list = [(200,200),(700,700)] #(px,px)
# Data calculation output path
path_cell = 'cellData'
getCellData(segmented_img_list, path_img, sampleName_list=sampleName_list,
            save_path=path_cell, imgLinearRes=imgLinearRes, maskLabels=[[255], [170]],
            ldStart=8, ldStop=15, windowShapes_list=windowShapes_list, edgeCleanMethod='fractional',
            fascicleMask_img_list=fascicleMask_img_list, excludeMask_img_list=list(zip(excludeMask_img_list, veinMask_img_list)),
            edgeMask_type='mask', edgeMask_img_list=electrodeMask_img_list, edgeDist_Name='ElectrodeDistance')



#### Load output data
cellLabels_list = [sampleName+'_cellLabels.zarr' for sampleName in sampleName_list]
cellData_list = [sampleName+'_cellData.zarr' for sampleName in sampleName_list]
celldataname_list_file = 'cellDataNames.txt'
cellCounts_list = [sampleName+'_cellCounts.zarr' for sampleName in sampleName_list]

samplesList_cellDataArray, celldataname_list, samplesList_cellCountsArray = loadCellSamples(path_cell, cellData_list, celldataname_list_file, cellCounts_list)



#### Measured values listed in cellDataNames.txt and loaded into celldataname_list
# AxonSize, MyelinSize, FiberSize
# AxonCircularity, FiberCircularity
# AxonAspectRatio, FiberAspectRatio
# gRatio, cRatio
# CenterDistance

# LocalDensityCoeff, LocalDensityExp
# FiberDensity_200_Complete, FiberDensity_700_Complete
# FiberPacking_200_Complete, FiberPacking_700_Complete
# AxonPacking_200, AxonPacking_700
# MyelinPacking_200, MyelinPacking_700

# GPacking_200, GPacking_700
# FascicleNNArea, FiberNNRatio, AxonNNRatio, MyelinNNRatio
# ElectrodeDistance
# CentroidR, CentroidC, BBoxR0, BBoxC0, BBoxR1, BBoxC1



#### Train support vector machines (SVM)
models_path = 'cellModels'

sampleIdx_list = [0, 1, 2] # index for each sample

# List of target values for each sample
surgery        = [0, 1, 1] # whether the sample experienced surgery
shannonK       = [-9, -5.39, -0.39] # Shannon K values for each sample's stimulation level [-9 can be any number as it's just a placeholder for a value that isn't going to be used]
sampleRegTargetVal_list_list = [surgery, shannonK]

# List of booleans for whether sample should be included in training
surgery_bool   = [1, 1, 0] # Control v Sham
shannonK_bool  = [0, 1, 1] # Sham v Stim
sampleRegBool_list_list = [surgery_bool, shannonK_bool]

targetValueName_list = ['Surgery', 'ShannonK']

# Feature indices for morphometrics
morphIdx_list = [0,1,3,4,5,6,7,8,9] #AxonSize, MyelinSize, AxonCircularity, FiberCircularity, AxonAspectRatio, FiberAspectRatio, gRatio, cRatio, CenterDistance
# Feature indices for structural windowed metrics using the larger window
largeWindowIdx_list = [13,17,19] # FiberDensity_700_Complete, AxonPacking_700, MyelinPacking_700

featureIdx_list_list = [morphIdx_list, largeWindowIdx_list, morphIdx_list+largeWindowIdx_list]
feature_groupName_list = ['morph', 'struct', 'morph_struct']

trainRegs(samplesList_cellDataArray, sampleName_list, sampleIdx_list, sampleRegTargetVal_list_list, sampleRegBool_list_list, featureIdx_list_list,
          targetValueName_list=targetValueName_list, feature_groupName_list=feature_groupName_list, train_ratio=0.7, max_iter=200000, tol=1e-12,
          save_path=models_path, saveValidationData=True)










#### Get pixel-wise metrics for each sample set
# Parameters for when calculating window-based measurements in parallel
num_cpus = 4
chunkSize = (800,800)
# Data calculation output path
path_pixel = 'pixelData'
getPixelData(segmented_img_list, path_img, sampleName_list=sampleName_list,
             save_path=path_pixel, imgLinearRes=imgLinearRes, maskLabels=[[255], [170]],
             windowShapes_list=windowShapes_list,
             fascicleMask_img_list=fascicleMask_img_list, excludeMask_img_list=list(zip(excludeMask_img_list, veinMask_img_list)),
             edgeMask_type='mask', edgeMask_img_list=electrodeMask_img_list, edgeDist_Name='ElectrodeDistance',
             getFiberD=True, getFiberP=True, getAxonP=True, getMyelinP=True, getNNratios=True,
             num_cpus=num_cpus, chunkSize=chunkSize)



#### Load output data
pixelMap_list = [sampleName+'_pixelMap.zarr' for sampleName in sampleName_list]
pixelData_list = [sampleName+'_pixelData.zarr' for sampleName in sampleName_list]
pixeldataname_list_file = 'pixelDataNames.txt'

samplesList_pixelDataArray, pixeldataname_list = loadPixelSamples(path_pixel, pixelData_list, pixeldataname_list_file)



### Measured values listed in pixelDataNames.txt and loaded into pixeldataname_list
# FascicleEdgeDistance, ElectrodeDistance
# FiberDensity_200, FiberPacking_200, AxonPacking_200, MyelinPacking_200, GPacking_200
# FiberDensity_700, FiberPacking_700, AxonPacking_700, MyelinPacking_700, GPacking_700
# FascicleNNArea, FiberNNRatio, AxonNNRatio, MyelinNNRatio



#### Train support vector machines (SVM)
models_path = 'pixelModels'

sampleIdx_list = [0, 1, 2] # index for each sample

# List of target values for each sample
surgery        = [0, 1, 1] # whether the sample experienced surgery
shannonK       = [-9, -5.39, -0.39] # Shannon K values for each sample's stimulation level [-9 can be any number as it's just a placeholder for a value that isn't going to be used]
sampleRegTargetVal_list_list = [surgery, shannonK]

# List of booleans for whether sample should be included in training
surgery_bool   = [1, 1, 0] # Control v Sham
shannonK_bool  = [0, 1, 1] # Sham v Stim
sampleRegBool_list_list = [surgery_bool, shannonK_bool]

targetValueName_list = ['Surgery', 'ShannonK']

# Feature indices for structural windowed metrics using the larger window
largeWindowIdx_list = [7,9,10] # FiberDensity_700, AxonPacking_700, MyelinPacking_700

featureIdx_list_list = [largeWindowIdx_list]
feature_groupName_list = ['struct']

trainRegs(samplesList_pixelDataArray, sampleName_list, sampleIdx_list, sampleRegTargetVal_list_list, sampleRegBool_list_list, featureIdx_list_list,
          targetValueName_list=targetValueName_list, feature_groupName_list=feature_groupName_list, train_ratio=0.7, max_iter=200000, tol=1e-12,
          save_path=models_path, saveValidationData=True)
